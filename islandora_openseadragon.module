<?php

/**
 * @file
 * Hooks and callbacks for this module.
 */

  // For requiring all Composer dependencies
require 'vendor/autoload.php';

/**
 * Implements hook_menu().
 */
function islandora_openseadragon_menu() {
  return array(
    'admin/islandora/openseadragon' => array(
      'title' => 'OpenSeadragon',
      'description' => 'Configuration for the OpenSeadragon viewer.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('islandora_openseadragon_admin'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_openseadragon_theme() {
  return array(
    'islandora_openseadragon_viewer' => array(
      'variables' => array(
        'uri' => '',
      ),
      'template' => 'theme/islandora-openseadragon',
    ),
  );
}

/**
 * Implements hook_islandora_viewer_info().
 */
function islandora_openseadragon_islandora_viewer_info() {
  return array(
    'islandora_openseadragon' => array(
      'label' => t('OpenSeadragon'),
        // Later we'll add DZI too.
      'description' => t('OpenSeadragon viewer with Djatoka as tilesource.'),
      'configuration' => 'admin/islandora/openseadragon',
      'callback' => 'islandora_openseadragon_callback',
        // DZI has xml as mimetype? Not sure how to handle that.
      'mimetype' => array('image/jp2'),
      'model' => array('islandora:bookCModel'), // @author griffinj@lafayette.edu
				       ),
  );
}

/**
 * Callback function for the viewer.
 *
 * @param array $params
 *   Params required by the theme
 *   Image url be passed to the viewer.
 * @param IslandoraFedoraObject $fedora_object
 *   The object that we are viewing.
 *
 * @return string
 *   HTML repersentation of the OpenSeadragon viewer
 */

/**
 * @author griffinj@lafayette.edu
 * Rendering pages for books through OpenSeadragon
 *
 */
function islandora_openseadragon_callback($params = NULL, $fedora_object = NULL) {

  $overlays = array();
  $global_overlays = array();

  if(array_key_exists('pages', $params)) {

    module_load_include('inc', 'islandora', 'includes/authtokens');

    $page_uris = array_keys($params['pages']);
    $pages = array_map('islandora_object_load', $page_uris);

    // For Pages without overlays...
    $map = function($page_obj) {

      //$page_obj = islandora_object_load($page_pid);
      $token = islandora_get_object_token($page_obj->id, 'JP2', 2);
      return url("islandora/object/{$page_obj->id}/datastream/JP2/view",
		 array('absolute' => TRUE,
		       'query' => array('token' => $token),
		       ));
    };

    $uri = array_map($map, $pages);

    /**
     * If there are overlays generated from the RDF of the Object being Views (i. e. the Yohe Album collections), append these as well
     *
     */

    /**
     * Generate the overlays from the OpenAnnotation SVG selectors
     *
     */
    $fedora_object = isset($fedora_object) ? $fedora_object : $params['object'];

    $parent_collection = array_shift($fedora_object->getParents());
    
    // Handling for member of the Yohe Albums collection
    // Refactor for an administrative configuration interface
    if(preg_match('/yohe\:/', $parent_collection)) {

      //foreach($pages as $page) {
      for($page_index=0;$page_index < count($pages);$page_index++) {

	$page = $pages[$page_index];

	// OpenAnnotation Selectors are managed as Islandora Page Objects
	$selector_uris = array_keys(islandora_paged_content_get_pages($page));
	$selectors = array_map('islandora_object_load', $selector_uris);
    
	for($i=0;$i < count($selectors);$i++) {

	  $selector = $selectors[$i];
	  
	  /**
	   * Retrieve the SVG selectors from the Selector Object
	   *
	   */

	  // Set for any uncommon namespaces (e. g. Fedora and OpenAnnotation ontologies)
	  EasyRdf_Namespace::set('oa', 'http://www.w3.org/ns/oa#');
	  EasyRdf_Namespace::set('cnt', 'http://www.w3.org/2011/content#');
	
	  // Deserialize the Graphs
	  $rels_ext_graph = new EasyRdf_Graph('info:fedora/' . $selector->id);
	  $rels_ext_graph->parse($selector['RELS-EXT']->content);

	  // Retrieve the embedded SVG Document for the selector
	  $selector_res = $rels_ext_graph->resource();
	  $svg = $selector_res->get('cnt:chars');

	  // Deserialize the SVG Document
	  $svg_doc = new SimpleXMLElement((string) $svg);

	  // Set the namespace and iterate for all rect entities
	  $svg_doc->registerXPathNamespace('svg', 'http://www.w3.org/2000/svg');

	  $page_overlays = array();

	  foreach($svg_doc->xpath('//svg:rect') as $rect) {

	    $overlay = array('id' => 'openseadragon-overlay-' . $page_index . '-' . $i,
			     //'x' => ((float) $rect['x'] / 675.297619048) / 6,
			     //'y' => ((float) $rect['y'] / 675.297619048) / 6,
			     'x' => ((float) $rect['x'] / 696) / 6,
			     'y' => ((float) $rect['y'] / 696) / 6,
			     //'width' => ((float) $rect['width'] / 675.297619048) / 2.512820513,
			     //'height' => ((float) $rect['height'] / 675.297619048) / 2.512820513,
			     //'width' => ((float) $rect['width'] / 675.297619048) / 6,
			     //'height' => ((float) $rect['height'] / 675.297619048) / 6,
			     'width' => ((float) $rect['width'] / 696) / 6,
			     'height' => ((float) $rect['height'] / 696) / 6,
			     'className' => 'openseadragon-overlay openseadragon-overlay-' . $page_index . '-' . $i
			     );
	    
	    $page_overlays[] = $overlay;
	    $global_overlays[] = $overlay;
	    
	  }
	}
	
	$overlays[$page_index] = $page_overlays;
      }
    }
  } else {

    $uri = $params['jp2_url'];
  }

  return theme('islandora_openseadragon_viewer', array('uri' => $uri, 'fedora_object' => $fedora_object, 'overlays' => $overlays, 'global_overlays' => $global_overlays));
}

/**
 * Implements hook_preprocess().
 */
function islandora_openseadragon_preprocess_islandora_openseadragon_viewer(&$variables) {
  // Variable fedora_object included in results, but not used.
  $library_path = libraries_get_path('openseadragon');
  $module_path = drupal_get_path('module', 'islandora_openseadragon');
  $variables['viewer_id'] = 'islandora-openseadragon';
  $settings = array(
    'id' => $variables['viewer_id'],
    'prefixUrl' => url($library_path),
  );
  $settings = array_merge($settings, islandora_openseadragon_get_settings());
  foreach ($settings as $key => $val) {
    if (filter_var($val, FILTER_VALIDATE_FLOAT)) {
      $settings[$key] = (float) $val;
    }
    elseif (filter_var($val, FILTER_VALIDATE_INT)) {
      $settings[$key] = (int) $val;
    }
  }

  // This is where we jam in some HOCR coordinates.
  if (isset($_GET['terms']) && isset($variables['fedora_object'])) {
    $highlighting_info = islandora_paged_content_get_highlighting_info($variables['fedora_object'], urldecode($_GET['terms']));
    $highlights = $highlighting_info['bounding_boxes'];

    foreach ($highlights as $key => $highlight) {
      // The size on the x axis is used to calculate the proportional values
      // under the openseadragon coordinate system.
      $highlights[$key]['x'] = $highlights[$key]['left'] / $highlighting_info['width'];
      $highlights[$key]['y'] = $highlights[$key]['top'] / $highlighting_info['width'];
      $highlights[$key]['width'] = ($highlights[$key]['right'] - $highlights[$key]['left']) / $highlighting_info['width'];
      $highlights[$key]['height'] = ($highlights[$key]['bottom'] - $highlights[$key]['top']) / $highlighting_info['width'];
      unset($highlights[$key]['left']);
      unset($highlights[$key]['top']);
      unset($highlights[$key]['right']);
      unset($highlights[$key]['bottom']);
      $highlights[$key]['className'] = "islandora-openseadragon-highlight";
    }
    $settings['overlays'] = $highlights;
  }

  /**
   * griffinj
   * 08/01/13
   * While $variables['fedora_object'] appears to be NULL in some cases, within these cases OpenSeadragon functions properly
   * Implementing a ternary operator in order to resolve the logging of the error
   *
  */
  
  /*
   * griffinj
   * Resolving HTTPS issue
   */

  /**
   * griffinj
   *
   */
  $fedora_object = $variables['fedora_object'];
  $tile_sources = $variables['uri'];

  // Work-around for single images
  if(!is_array($tile_sources)) {

    $tile_sources = array($tile_sources);
  }

  // Work-around for the HTTPS
  $map = function($tile_source) {

    return preg_replace('/^https/', 'http', $tile_source);
  };

  $overlays = $variables['overlays'];
  $global_overlays = $variables['global_overlays'];

  drupal_add_js(array('islandoraOpenSeadragon' => array('pid' => isset($variables['fedora_object']) ? $variables['fedora_object']->id : NULL,
							//'resourceUri' => preg_replace('/^https/', 'http', $variables['uri']),
							'resourceUri' => array_map($map, $tile_sources),
							/**
							 * Integrating overlay support
							 *
							 */
							'overlays' => $overlays,
							'globalOverlays' => $global_overlays,
							'tileSize' => (int) variable_get('islandora_openseadragon_tile_size', '256'),
							'tileOverlap' => (int) variable_get('islandora_openseadragon_tile_overlap', '0'),
							'settings' => $settings,
							),
		      ), 'setting');

  drupal_add_js("$library_path/openseadragon.js");
  drupal_add_js("$module_path/js/djtilesource.js");
  drupal_add_js("$module_path/js/islandora_openseadragon.js");

  drupal_add_css("$module_path/css/islandora_openseadragon.theme.css");
}

/**
 * Get OpenSeadragon settings.
 *
 * @return array
 *   Configuration options for OpenSeadragon.
 */
function islandora_openseadragon_get_settings() {
  return variable_get('islandora_openseadragon_settings', array(
      'debugMode' => FALSE,
      'animationTime' => '1.5',
      'blendTime' => '0.1',
      'alwaysBlend' => FALSE,
      'autoHideControls' => TRUE,
      'immediateRender' => FALSE,
      'wrapHorizontal' => FALSE,
      'wrapVertical' => FALSE,
      'wrapOverlays' => FALSE,
      'panHorizontal' => TRUE,
      'panVertical' => TRUE,
      'minZoomImageRatio' => '0.8',
      'maxZoomPixelRatio' => '2',
      'visibilityRatio' => '0.5',
      'springStiffness' => '5.0',
      'imageLoaderLimit' => '5',
      'clickTimeThreshold' => '300',
      'clickDistThreshold' => '5',
      'zoomPerClick' => '2.0',
      'zoomPerScroll' => '1.2',
      'zoomPerSecond' => '2.0',
    )
  );
}

/**
 * Implements hook_process_theme().
 */
function islandora_openseadragon_preprocess_islandora_object_print(array &$variables) {
  $object = $variables['object'];
  if (isset($_GET['clip'])) {
    $dimensions = array();
    if (isset($_GET['dimensions'])) {
      $dimensions = explode(',', $_GET['dimensions']);
      $dimensions = array(
        'width' => $dimensions[0],
        'height' => $dimensions[1],
      );
    }
    $variables['clip'] = $clip = $_GET['clip'];
    $variables['content']['clip'] = array(
      '#weight' => 0,
      '#prefix' => "<div id='clip'>",
      '#markup' => theme_image(array(
                   'path' => $_GET['clip'], 'attributes' => $dimensions)),
      '#suffix' => '</div>',
    );
  }
}
